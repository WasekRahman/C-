#include<vector>
#include<iostream>
#include<algorithm>
#include <queue>
/*
	Instruction:
	1) All code should be written in this file.
	2) Rename this file to YourStudentID_CSE225_Summer2018_Final.cpp
	   If your student ID is 1234567, the file should be
	   1234567_CSE225_Summer2018_Final.cpp
	3) None of the given functions or data can be changed.
	4) You can use your own data structure.
	5) For declaring variables with garbage name like i, j, k, points will be reduced.
	6) Make sure your variable names are meaningful.
	7) Codes will be compared against each other.
	8) You will have 24 hrs to complete this code.
	9) STL use is allowed.
		You can use STL whenever you feel is necessary.
	10) You can add more functions or classes if necessary.
		You can not make modifications to existing functions.
	11) extractTop25NumbersUsingHeap and extractTop25NumbersUsingSorting
	    are the two functions where you are going to make edits.
		Outside of these two functions, you can not make modifications to
		Any given functions.

*/


std::vector<int> getThousandRandomNumbers(void)
{
    std::vector<int> thousandRandomNumbers =
    {
        5911,6921,8582,4555,9027,
        3812,9095,2322,7236,9264,
        2577,7107,6291,9812,1680,
        8974,6790,9415,8684,9169,
        9690,7239,9434,9480,8204,
        9718,5367,4099,8809,3076,
        788,2888,5997,2173,4365,
        9088,9154,5028,8603,8363,
        6257,2052,3277,4084,7689,
        5688,764,5681,2194,319,
        1954,4478,8894,4040,9924,
        4274,5157,8766,8008,3984,
        5037,6927,7597,7937,5520,
        9525,7949,2717,605,5561,
        9787,5675,221,1848,9410,
        1350,2357,8509,8198,1628,
        7451,715,4203,2206,6066,
        4574,4474,4759,1625,7938,
        8144,4482,1140,3092,2310,
        8769,4202,7164,5162,8326,
        6289,2487,1185,1447,2827,
        1651,1167,9878,1661,6922,
        2443,6744,5975,4699,78,
        7012,2526,558,4954,4058,
        3003,3311,8677,9305,5057,
        7918,241,2659,8662,8087,
        4168,4792,6630,9232,7079,
        2515,4725,7486,8127,3505,
        1830,6854,26,5909,9212,
        7540,3419,4789,2526,6006,
        6107,896,9723,2913,2510,
        4015,2881,7243,7263,6203,
        5572,4933,8309,7194,4286,
        3323,4804,6658,2458,9222,
        1954,2120,5990,8356,8478,
        4273,1040,4480,2860,7258,
        5218,2386,477,8368,4410,
        4660,7878,2737,8016,917,
        3181,8169,4671,1840,7415,
        6312,6590,6088,4941,5361,
        9140,3382,5715,1245,9204,
        8334,7332,414,3285,6211,
        9284,3565,8682,7778,7065,
        897,502,2179,4332,7993,
        3920,3984,3789,9454,8145,
        9538,9406,9777,8848,7165,
        6488,7459,5771,1570,9207,
        8116,9899,4126,7725,8643,
        3072,2489,4600,6114,1212,
        1795,8479,829,4019,6694,
        283,1242,2539,8560,9883,
        465,7098,7649,5472,7906,
        1357,1623,4198,9559,4178,
        5112,9026,2207,5622,9692,
        9578,2188,3972,5519,6374,
        9665,6626,513,4537,2515,
        546,8213,1072,3592,2623,
        5875,1857,92,3076,1112,
        1907,3264,9189,6327,420,
        154,3860,5806,3343,1073,
        2350,2819,3978,6596,4494,
        3550,9379,3224,7880,537,
        4275,2438,7014,3419,6292,
        3632,8028,2448,2736,9753,
        8779,696,7614,7199,8891,
        9281,3348,8481,4250,4764,
        3915,135,5832,7747,6298,
        8805,6166,3817,4675,7195,
        8970,1444,1445,6144,1000,
        7372,8460,270,1787,1108,
        4382,3605,9249,4861,2544,
        1303,1165,5413,1803,457,
        4455,8561,9076,4134,6384,
        657,8712,8270,6082,5987,
        5638,4444,6066,2901,5096,
        1421,9115,3193,8920,6852,
        8543,7008,9567,9423,1587,
        674,7348,1343,8051,4420,
        6065,1920,5198,647,6146,
        8728,298,6398,9206,73,
        2695,1830,1321,8712,7405,
        3480,5351,976,9403,9922,
        5074,2680,380,7742,2941,
        7336,5378,1917,8405,4341,
        6144,2462,2412,6519,2268,
        2602,3217,3931,3898,6656,
        4232,3396,919,1704,7969,
        2400,7569,2528,5873,1228,
        8779,3642,4977,1110,3163,
        5254,7609,8879,1751,619,
        3189,1718,824,6534,6426,
        6883,4797,4417,5262,5994,
        2144,6317,2409,4071,8489,
        1400,3166,987,7179,6769,
        1229,1922,1614,7925,292,
        233,4009,1158,2007,5367,
        1877,2966,651,8385,6054,
        2654,2155,5860,7132,6108,
        4451,9316,2427,4141,2250,
        7455,7907,8312,1442,8359,
        9754,362,7915,7148,4762,
        6072,7325,4139,9937,6758,
        5421,3973,4794,485,4362,
        5788,9980,6564,8013,6920,
        1349,3497,3282,6979,4418,
        3293,6474,8711,2123,283,
        3608,2813,1817,5296,7841,
        8889,8620,1272,4095,7421,
        1079,6339,2383,365,4872,
        7839,6399,6228,4032,7625,
        4172,2815,4768,8061,1430,
        4353,1164,9661,3175,9663,
        3576,9877,4532,866,7489,
        641,9846,700,6117,5584,
        6069,4250,1344,8259,7621,
        7788,4786,4688,1521,9262,
        4728,9010,5108,3251,1313,
        8922,5710,7254,373,3917,
        8775,4827,5233,2910,5099,
        2010,6560,121,5602,1773,
        676,6430,5735,1639,7367,
        6006,164,4475,1552,3507,
        1769,2378,5417,1750,1428,
        4680,9434,5599,3733,9758,
        141,5516,8509,2676,234,
        2793,8863,726,5193,9565,
        9673,2174,2552,740,7233,
        325,4497,5737,5421,8447,
        9474,4638,9853,2629,2368,
        4398,9162,7607,7465,7012,
        787,1337,6213,7462,9030,
        6871,9855,6832,5228,4682,
        5030,5719,7487,5829,713,
        5033,1616,3743,2233,9051,
        7466,842,3140,4800,4282,
        861,1052,1778,8358,1587,
        2032,8573,2911,9376,1377,
        9070,6786,6516,812,717,
        5397,3050,4767,9762,9197,
        3916,5357,6772,3317,8829,
        1246,3741,8050,5156,8010,
        8010,1452,3195,6013,7381,
        2906,3697,5253,7345,6078,
        9714,8363,4987,1293,6185,
        7589,5218,3315,8436,9332,
        2861,9200,4744,9088,1097,
        7348,9021,1423,8195,8969,
        754,3019,5035,7950,4327,
        2636,3119,347,791,2776,
        5355,293,7317,7274,3224,
        3854,1671,8902,5560,7215,
        5522,2383,3287,8678,533,
        1804,7516,1841,3046,1355,
        1608,8683,3988,7807,4924,
        3092,4269,2983,7360,5885,
        4744,1236,1333,6144,7848,
        8368,2424,2979,7983,5031,
        7459,5392,8406,6809,3123,
        5319,3661,9374,2983,8585,
        9142,7807,6144,4625,637,
        5738,4444,6579,4575,7129,
        8004,1845,6953,6494,5737,
        4345,7525,909,5618,5934,
        3420,8300,2942,7462,782,
        9584,6586,7042,924,4823,
        8388,20,6318,8281,1973,
        966,6612,6561,8390,1928,
        2552,1807,9245,4351,1677,
        2869,4100,9054,4663,5799,
        9102,3335,1488,8883,9025,
        6857,727,1046,7243,1280,
        8541,4956,3062,3933,2452,
        7723,3047,4538,3716,8701,
        8456,4211,4401,4884,6923,
        7384,5795,9777,7899,2624,
        2657,2234,1800,4775,9558,
        2421,9078,5440,2580,3385,
        3311,3993,2551,7139,8011,
        1175,2017,9501,6198,2358,
        9357,7196,9878,1802,1650,
        9659,4185,3590,9060,8428,
        5948,6316,3070,1355,7630,
        5663,6610,5964,681,3098,
        2480,4137,1331,8584,2773,
        4290,4080,4072,9554,1630,
        2441,2312,3542,7716,2847,
        1052,2114,580,3001,1271,
        297,4602,4313,5261,8643,
        4868,2949,416,8358,6881,
        6594,4252,6102,6650,2989,
        3724,8400,7064,6646,3924,
        785,7499,8230,9526,8359,
        556,4198,2092,5268,9920,
        6854,3928,8701,4619,6402,
        2290,6424,9197,9876,4300,
        6434,3632,2970,2444,5080,
        3753,7615,3292,6573,9447,
        8482,7446,4013,3951,4083,
        138,5388,7531,5611,7140,
        126,728,8935,4455,4480,
    };

    return thousandRandomNumbers;
}

std::vector<int> getAnswerForTesting()
{
    std::vector<int> top25Numbers = { 9980 ,
			9937 , 9924 , 9922 , 9920 , 9899 , 9883 , 9878 , 9878 , 9877 , 9876 ,
			9855 , 9853 , 9846 , 9812 , 9787 , 9777 , 9777 , 9762 , 9758 , 9754 ,
			9753 , 9723 , 9718 , 9714 };

	return top25Numbers;
}

void CompareResults(const std::vector<int>& actualResult, const std::vector<int>& theoraticalResult)
{
    bool result = std::equal(actualResult.begin(), actualResult.end(), theoraticalResult.begin());
    if (result)
    {
        std::cout << "Your results are correct!" << std::endl;
    }
}

void printNumbers(const std::vector<int>& numbers)
{
    std::cout << "Printing Numbers" << std::endl;
    int step = 10;
    for (int index = 0; index < numbers.size(); index++)
    {
        std::cout << numbers.at(index) << " , ";
        if ((index%step)+1 == 10)
            std::cout << std::endl;
    }
    std::cout << std::endl << "All numbers printed" << std::endl << std::endl;
}


std::vector<int> extractTop25NumbersUsingHeap(std::vector<int> thousandNumbers)
{
	//Marks 50
	std::vector<int> result(25);
	int stepSize = 25;

	//Extract the numbers using heap.
	//Do not remove comments
    std::make_heap (thousandNumbers.begin(),thousandNumbers.end());

    std::sort_heap (thousandNumbers.begin(), thousandNumbers.end());


    for (int index = thousandNumbers.size()-25; index < thousandNumbers.size(); index++)
	{
	    if(stepSize!=0){
		result[stepSize-1] = thousandNumbers.at(index);
		stepSize--;
	    }
	    else
        {
            break;
        }
	}

	return result;
}
std::vector<int> merge(std::vector<int> &vec, int low, int mid, int high)
{
    int index = low;
    std::queue<int> left;
    std::queue<int> right;

    for (int i = low; i <= mid; ++i)
    {
        left.push(vec[i]);
    }
    for (int i = mid + 1; i <= high; ++i)
    {
        right.push(vec[i]);
    }

    while (!left.empty() && !right.empty())
    {
        if (left.front() < right.front())
        {
            vec[index] = left.front();
            left.pop();
        }
        else
        {
            vec[index] = right.front();
            right.pop();
        }
        index++;
    }
    while (!left.empty())
    {
        vec[index] = left.front();
        left.pop();
        index++;
    }

    while (!right.empty())
    {
        vec[index] = right.front();
        right.pop();
        index++;
    }

}

std::vector<int> merge_sort(std::vector<int> &vec, int low, int high)
{
    std::cout<<"sdfghjkjhgfdfghjk";
    if (low < high)
    {
        int middle = (low + high) / 2;
        merge_sort(vec, low, middle);
        merge_sort(vec, middle + 1, high);
        merge(vec, low, middle, high);
    }
}
std::vector<int> extractTop25NumbersUsingSorting(std::vector<int> thousandNumbers)
{
    //Mark 50
    std::cout<<"asaaaaaaaaaaaaaaaa";
    std::vector<int> result1;
    merge_sort(thousandNumbers, 1 ,thousandNumbers.size());

    int stepSize = 25;

    std::cout << "Sorted";
    for (std::vector<int>::iterator index=thousandNumbers.end(); index!=(thousandNumbers.end()-25); --index)
    {
        if(stepSize!=0)
        {
            int temp = *index;
            std::cout<<temp;
            result1.push_back(temp);
            stepSize--;
        }
        else if(stepSize==0)
        {
            break;
        }
    }
    std::cout << '\n';


    //Apply an efficient sorting algorithm.
    //Explain your Choice in the comments
    //Your choice of sorting algorithm will be marked based on its efficiency.
    //Do not change the comments of the code
    /*******************************************/


    return result1;
}

void TestHeapBasedExtraction(std::vector<int> thousandRandomNumbers)
{
    std::cout << "Testing Heap Based Extraction." << std::endl;
    printNumbers(thousandRandomNumbers);
    std::vector<int> extractedNumbers = extractTop25NumbersUsingHeap(thousandRandomNumbers);
    printNumbers(extractedNumbers);
    CompareResults(extractedNumbers, getAnswerForTesting());
    std::cout << "------End of Heap Based Extraction---------" << std::endl;
}

void TestSortingBasedExtraction(std::vector<int> thousandRandomNumbers)
{
    std::cout << "Testing Sorting Based Extraction." << std::endl;
    printNumbers(thousandRandomNumbers);
    std::vector<int> extractedNumbers = extractTop25NumbersUsingSorting(thousandRandomNumbers);
    printNumbers(extractedNumbers);
    CompareResults(extractedNumbers, getAnswerForTesting());
    std::cout << "------End of Sorting Based Extraction---------" << std::endl;
}

int main(void)
{
    std::vector<int> thousandRandomNumbers = getThousandRandomNumbers();
    TestHeapBasedExtraction(thousandRandomNumbers);
    TestSortingBasedExtraction(thousandRandomNumbers);

    int c;
    std::cin >> c;
    return 0;
}
